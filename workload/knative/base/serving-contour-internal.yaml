---
apiVersion: v1
kind: Namespace
metadata:
  name: contour-internal
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: contour
  namespace: contour-internal
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: contour
  namespace: contour-internal
data:
  contour.yaml: |
    leaderelection:
      configmap-name: contour
      configmap-namespace: contour-internal
    # should contour expect to be running inside a k8s cluster
    # incluster: true
    #
    # path to kubeconfig (if not running inside a k8s cluster)
    # kubeconfig: /path/to/.kube/config
    #
    # Client request timeout to be passed to Envoy
    # as the connection manager request_timeout.
    # Defaults to 0, which Envoy interprets as disabled.
    # Note that this is the timeout for the whole request,
    # not an idle timeout.
    # request-timeout: 0s
    # disable ingressroute permitInsecure field
    disablePermitInsecure: false
    tls:
    #   minimum TLS version that Contour will negotiate
    #   minimum-protocol-version: "1.1"
    # The following config shows the defaults for the leader election.
    # leaderelection:
    #   configmap-name: contour
    #   configmap-namespace: leader-elect
    ### Logging options
    # Default setting
    accesslog-format: envoy
    # To enable JSON logging in Envoy
    # accesslog-format: json
    # The default fields that will be logged are specified below.
    # To customise this list, just add or remove entries.
    # The canonical list is available at
    # https://godoc.org/github.com/projectcontour/contour/internal/envoy#JSONFields
    # json-fields:
    #   - "@timestamp"
    #   - "authority"
    #   - "bytes_received"
    #   - "bytes_sent"
    #   - "downstream_local_address"
    #   - "downstream_remote_address"
    #   - "duration"
    #   - "method"
    #   - "path"
    #   - "protocol"
    #   - "request_id"
    #   - "requested_server_name"
    #   - "response_code"
    #   - "response_flags"
    #   - "uber_trace_id"
    #   - "upstream_cluster"
    #   - "upstream_host"
    #   - "upstream_local_address"
    #   - "upstream_service_time"
    #   - "user_agent"
    #   - "x_forwarded_for"
---
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: contour-certgen
  namespace: contour-internal
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: RoleBinding
metadata:
  name: contour
  namespace: contour-internal
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: contour-certgen
subjects:
- kind: ServiceAccount
  name: contour-certgen
  namespace: contour-internal
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: Role
metadata:
  name: contour-certgen
  namespace: contour-internal
rules:
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - list
  - watch
  - create
  - get
  - put
  - post
  - patch
---
apiVersion: batch/v1
kind: Job
metadata:
  name: contour-certgen
  namespace: contour-internal
spec:
  ttlSecondsAfterFinished: 0
  template:
    metadata:
      labels:
        app: "contour-certgen"
    spec:
      containers:
      - name: contour
        image: gcr.io/knative-releases/knative.dev/net-contour/vendor/github.com/projectcontour/contour/cmd/contour@sha256:b1888793f37ec0164befeefc051bd493ad67ce737d19ba10b0478ab4f029b46b
        imagePullPolicy: Always
        command:
        - contour
        - certgen
        - --namespace=contour-internal
        - --incluster
        - --kube
        env:
        - name: CONTOUR_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
      restartPolicy: Never
      serviceAccountName: contour-certgen
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534
        runAsGroup: 65534
  parallelism: 1
  completions: 1
  backoffLimit: 1
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: Role
metadata:
  name: contour-leaderelection
  namespace: contour-internal
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - create
  - get
  - list
  - watch
  - update
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
  - update
  - patch
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: RoleBinding
metadata:
  name: contour-leaderelection
  namespace: contour-internal
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: contour-leaderelection
subjects:
- kind: ServiceAccount
  name: contour
  namespace: contour-internal
---
apiVersion: v1
kind: Service
metadata:
  name: contour
  namespace: contour-internal
spec:
  ports:
  - port: 8001
    name: xds
    protocol: TCP
    targetPort: 8001
  selector:
    app: contour
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  name: envoy
  namespace: contour-internal
  annotations:
    # This annotation puts the AWS ELB into "TCP" mode so that it does not
    # do HTTP negotiation for HTTPS connections at the ELB edge.
    # The downside of this is the remote IP address of all connections will
    # appear to be the internal address of the ELB. See docs/proxy-proto.md
    # for information about enabling the PROXY protocol on the ELB to recover
    # the original remote IP address.
    service.beta.kubernetes.io/aws-load-balancer-backend-protocol: tcp
spec:
  # externalTrafficPolicy: Local
  ports:
  - port: 80
    name: http
    protocol: TCP
  - port: 443
    name: https
    protocol: TCP
  selector:
    app: envoy
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: contour
  name: contour
  namespace: contour-internal
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      # This value of maxSurge means that during a rolling update
      # the new ReplicaSet will be created first.
      maxSurge: 50%
  selector:
    matchLabels:
      app: contour
  template:
    metadata:
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8000"
      labels:
        app: contour
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchLabels:
                  app: contour
              topologyKey: kubernetes.io/hostname
            weight: 100
      containers:
      - args:
        - serve
        - --ingress-class-name=contour-internal
        - --incluster
        - --use-extensions-v1beta1-ingress
        - --xds-address=0.0.0.0
        - --xds-port=8001
        - --envoy-service-http-port=80
        - --envoy-service-https-port=443
        - --contour-cafile=/ca/cacert.pem
        - --contour-cert-file=/certs/tls.crt
        - --contour-key-file=/certs/tls.key
        - --config-path=/config/contour.yaml
        command: ["contour"]
        image: gcr.io/knative-releases/knative.dev/net-contour/vendor/github.com/projectcontour/contour/cmd/contour@sha256:b1888793f37ec0164befeefc051bd493ad67ce737d19ba10b0478ab4f029b46b
        imagePullPolicy: Always
        name: contour
        ports:
        - containerPort: 8001
          name: xds
          protocol: TCP
        - containerPort: 8000
          name: debug
          protocol: TCP
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8000
        readinessProbe:
          tcpSocket:
            port: 8001
          initialDelaySeconds: 15
          periodSeconds: 10
        volumeMounts:
        - name: contourcert
          mountPath: /certs
          readOnly: true
        - name: cacert
          mountPath: /ca
          readOnly: true
        - name: contour-config
          mountPath: /config
          readOnly: true
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.name
      dnsPolicy: ClusterFirst
      serviceAccountName: contour
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534
        runAsGroup: 65534
      volumes:
      - name: contourcert
        secret:
          secretName: contourcert
      - name: cacert
        secret:
          secretName: cacert
      - name: contour-config
        configMap:
          name: contour
          defaultMode: 0644
          items:
          - key: contour.yaml
            path: contour.yaml
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  labels:
    app: envoy
  name: envoy
  namespace: contour-internal
spec:
  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 10%
  selector:
    matchLabels:
      app: envoy
  template:
    metadata:
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8002"
        prometheus.io/path: "/stats/prometheus"
      labels:
        app: envoy
    spec:
      containers:
      - args:
        - -c
        - /config/envoy.json
        - --service-cluster $(CONTOUR_NAMESPACE)
        - --service-node $(ENVOY_POD_NAME)
        - --log-level info
        command:
        - envoy
        image: docker.io/envoyproxy/envoy:v1.12.2
        imagePullPolicy: IfNotPresent
        name: envoy
        env:
        - name: CONTOUR_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: ENVOY_POD_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.name
        ports:
        - containerPort: 80
          # hostPort: 80
          name: http
          protocol: TCP
        - containerPort: 443
          # hostPort: 443
          name: https
          protocol: TCP
        readinessProbe:
          httpGet:
            path: /ready
            port: 8002
          initialDelaySeconds: 3
          periodSeconds: 3
        volumeMounts:
        - name: envoy-config
          mountPath: /config
        - name: envoycert
          mountPath: /certs
        - name: cacert
          mountPath: /ca
        lifecycle:
          preStop:
            exec:
              command:
              - bash
              - -c
              - --
              - echo
              - -ne
              - "POST /healthcheck/fail HTTP/1.1\r\nHost: localhost\r\nConnection:
                close\r\n\r\n"
              - '>/dev/tcp/localhost/9001'
      initContainers:
      - args:
        - bootstrap
        - /config/envoy.json
        - --xds-address=contour
        - --xds-port=8001
        - --envoy-cafile=/ca/cacert.pem
        - --envoy-cert-file=/certs/tls.crt
        - --envoy-key-file=/certs/tls.key
        command:
        - contour
        image: gcr.io/knative-releases/knative.dev/net-contour/vendor/github.com/projectcontour/contour/cmd/contour@sha256:b1888793f37ec0164befeefc051bd493ad67ce737d19ba10b0478ab4f029b46b
        imagePullPolicy: Always
        name: envoy-initconfig
        volumeMounts:
        - name: envoy-config
          mountPath: /config
        - name: envoycert
          mountPath: /certs
          readOnly: true
        - name: cacert
          mountPath: /ca
          readOnly: true
        env:
        - name: CONTOUR_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
      automountServiceAccountToken: false
      volumes:
      - name: envoy-config
        emptyDir: {}
      - name: envoycert
        secret:
          secretName: envoycert
      - name: cacert
        secret:
          secretName: cacert
      restartPolicy: Always
---
