#@ load("@ytt:data", "data")

---
apiVersion: v1
kind: Namespace
metadata:
  name: management
---
kind: Service
apiVersion: v1
metadata:
  name: gangway
  namespace: management
  labels:
    app.kubernetes.io/name: gangway
    app.kubernetes.io/instance: gangway
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 8080
      targetPort: http
  selector:
    app.kubernetes.io/name: gangway
    app.kubernetes.io/instance: gangway
---
apiVersion: projectcontour.io/v1
kind: HTTPProxy
metadata:
  name: gangway
  namespace: management
spec:
  virtualhost:
    fqdn: #@ "sso.management.{}".format(data.values.domain)
    tls:
      secretName: #@ "management/management.{}".format(data.values.domain)
  routes:
    - services:
        - name: gangway
          port: 8080
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: gangway
  namespace: management
data:
  #@yaml/text-templated-strings
  gangway.yaml: |
    # The cluster name. Used in UI and kubectl config instructions.
    # Env var: GANGWAY_CLUSTER_NAME
    clusterName: "(@= data.values.management.cluster_name @)"

    # OAuth2 URL to start authorization flow.
    # Env var: GANGWAY_AUTHORIZE_URL
    authorizeURL: "(@= data.values.auth.authorizeURL @)"

    # OAuth2 URL to obtain access tokens.
    # Env var: GANGWAY_TOKEN_URL
    tokenURL: "(@= data.values.auth.tokenURL @)"

    # Endpoint that provides user profile information [optional]. Not all providers
    # will require this.
    # Env var: GANGWAY_AUDIENCE
    audience: "(@= data.values.auth.audience @)"

    # Used to specify the scope of the requested Oauth authorization.
    scopes: ["openid", "profile", "email", "offline_access"]

    # Where to redirect back to. This should be a URL where gangway is reachable.
    # Typically this also needs to be registered as part of the oauth application
    # with the oAuth provider.
    # Env var: GANGWAY_REDIRECT_URL
    redirectURL: "(@= data.values.auth.redirectURL @)"

    # The JWT claim to use as the username. This is used in UI.
    # Default is "nickname". This is combined with the clusterName
    # for the "user" portion of the kubeconfig.
    # Env var: GANGWAY_USERNAME_CLAIM
    usernameClaim: "(@= data.values.auth.usernameClaim @)"

    emailClaim: "(@= data.values.auth.emailClaim @)"

    # The API server endpoint used to configure kubectl
    # Env var: GANGWAY_APISERVER_URL
    apiServerURL: "(@= data.values.management.apiServerURL @)"

    # The path to find the CA bundle for the API server. Used to configure kubectl.
    # This is typically mounted into the default location for workloads running on
    # a Kubernetes cluster and doesn't need to be set.
    # Env var: GANGWAY_CLUSTER_CA_PATH
    # cluster_ca_path: "/var/run/secrets/kubernetes.io/serviceaccount/ca.crt"

    # The path to find custom HTML templates
    # Env var: GANGWAY_CUSTOM_HTTP_TEMPLATES_DIR
    #customHTMLTemplatesDir: /custom-templates
---
apiVersion: v1
kind: Secret
metadata:
  name: gangway
  namespace: management
stringData:
  clientSecret: #@ data.values.auth.clientSecret
  clientID: #@ data.values.auth.clientID
  sesssionKey: #@ data.values.auth.sesssionKey
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: gangway
  namespace: management
  labels:
    app.kubernetes.io/name: gangway
    app.kubernetes.io/instance: gangway
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: gangway
      app.kubernetes.io/instance: gangway
  template:
    metadata:
      labels:
        app.kubernetes.io/name: gangway
        app.kubernetes.io/instance: gangway
        revision: "1"
    spec:
      containers:
        - name: gangway
          image: registry.tkg.vmware.run/gangway:v3.2.0_vmware.1
          imagePullPolicy: IfNotPresent
          command: ["gangway", "-config", "/gangway/gangway.yaml"]
          env:
            - name: GANGWAY_PORT
              value: "8080"
            - name: GANGWAY_HOST
              value: "0.0.0.0"
            - name: GANGWAY_SERVE_TLS
              value: "false"
            - name: GANGWAY_SESSION_SECURITY_KEY
              valueFrom:
                secretKeyRef:
                  name: gangway
                  key: sesssionKey
            - name: GANGWAY_CLIENT_ID
              valueFrom:
                secretKeyRef:
                  name: gangway
                  key: clientID         
            - name: GANGWAY_CLIENT_SECRET
              valueFrom:
                secretKeyRef:
                  name: gangway
                  key: clientSecret
          ports:
            - name: http
              containerPort: 8080
          resources:
            requests:
              cpu: "100m"
              memory: "128Mi"
            limits:
              cpu: "200m"
              memory: "512Mi"
          volumeMounts:
            - name: gangway
              mountPath: /gangway/
          livenessProbe:
            httpGet:
              path: /
              port: 8080
            initialDelaySeconds: 20
            timeoutSeconds: 1
            periodSeconds: 60
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /
              port: 8080
            timeoutSeconds: 1
            periodSeconds: 10
            failureThreshold: 3
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534
        runAsGroup: 65534
      volumes:
        - name: gangway
          configMap:
            name: gangway